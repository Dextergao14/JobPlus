package external;

import com.ibm.watson.natural_language_understanding.v1.NaturalLanguageUnderstanding;

import com.ibm.watson.natural_language_understanding.v1.model.AnalysisResults;
import com.ibm.watson.natural_language_understanding.v1.model.AnalyzeOptions;
import com.ibm.watson.natural_language_understanding.v1.model.EntitiesOptions;
import com.ibm.watson.natural_language_understanding.v1.model.Features;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

import com.ibm.cloud.sdk.core.security.Authenticator;

import com.ibm.cloud.sdk.core.security.IamAuthenticator;


public class IBMWatsonNLU {
	
	private static final String IBM_API_KEY = "1y_QK-XyG3UGvhQu5TKMGufCm4IjKi1wIFf4LsqIN89f";
	
	private static AnalysisResults getResults(String text, String apiKey) {
		Authenticator authenticator = new IamAuthenticator(apiKey);
		NaturalLanguageUnderstanding service = new NaturalLanguageUnderstanding("2019-07-12", authenticator);

		EntitiesOptions entities = new EntitiesOptions.Builder()
		  .sentiment(false)
		  .limit(1L)
		  .build();
		Features features = new Features.Builder()
		  .entities(entities)
		  .build();
		AnalyzeOptions parameters = new AnalyzeOptions.Builder()
		  .text(text)
		  .features(features)
		  .build();

		AnalysisResults results = service.analyze(parameters).execute().getResult();
//		System.out.println(results);
		return results;
	}
	
	// .toString converts AnalysisResults to String type with json character
    public static List<String> extractTextFromJson(AnalysisResults analysisResult) {
    	JSONObject json = new JSONObject(analysisResult.toString());
    	
        List<String> extractedTexts = new ArrayList<>();
        extractTextRecursively(json, extractedTexts);
        return extractedTexts;
    }

    private static void extractTextRecursively(Object element, List<String> texts) {
        if (element instanceof JSONObject) {
            JSONObject jsonObject = (JSONObject) element;
            jsonObject.keySet().forEach(key -> {
                if ("text".equals(key)) {
                    texts.add(jsonObject.get(key).toString());
                } else {
                    extractTextRecursively(jsonObject.get(key), texts);
                }
            });
        } else if (element instanceof JSONArray) {
            JSONArray jsonArray = (JSONArray) element;
            for (int i = 0; i < jsonArray.length(); i++) {
                extractTextRecursively(jsonArray.get(i), texts);
            }
        }
    }
	
	
	
	public static void main(String[] args) {
		String test = "Must have 15 years of experience working in Data science, Machine learning and especially NLP technologies. Exposure to various Large language models (LLM) technologies and solid understanding of Transformer Encoder Networks. Able to apply deep learning and generative modeling techniques to develop LLM solutions in the field of Artificial Intelligence. Utilize your extensive knowledge and expertise in machine learning (Client) with a focus on generative models, including but not limited to geneâ€¦";
		AnalysisResults res = getResults(test, IBM_API_KEY);
		List<String> keywords = extractTextFromJson(res);
		System.out.println(keywords);
	}
}
